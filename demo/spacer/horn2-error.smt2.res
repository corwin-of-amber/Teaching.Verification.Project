sat
(let ((a!1 (forall ((A!1 Int) (B!1 Int) (C!1 Int) (D!1 Int) (E Int) (F Int))
             (! (=> (and (Inv C!1 D!1 A!1 B!1)
                         (= F (+ 1 B!1))
                         (not (<= D!1 B!1))
                         (= E (+ 1 A!1)))
                    (Inv C!1 D!1 E F))
                :weight 0)))
      (a!2 (forall ((A!1 Int) (B!1 Int))
             (! (=> (not (<= B!1 4)) (Inv A!1 B!1 A!1 0)) :weight 0))))
(let ((a!3 ((_ hyper-res 0 0 0 1)
             (asserted a!1)
             ((_ hyper-res 0 0 0 1)
               (asserted a!1)
               ((_ hyper-res 0 0) (asserted a!2) (Inv 0 5 0 0))
               (Inv 0 5 1 1))
             (Inv 0 5 2 2))))
(let ((a!4 ((_ hyper-res 0 0 0 1)
             (asserted a!1)
             ((_ hyper-res 0 0 0 1)
               (asserted a!1)
               ((_ hyper-res 0 0 0 1) (asserted a!1) a!3 (Inv 0 5 3 3))
               (Inv 0 5 4 4))
             (Inv 0 5 5 5))))
(let ((a!5 ((_ hyper-res 0 0 0 1)
             (asserted (forall ((A!1 Int) (B!1 Int) (C!1 Int) (D!1 Int))
                         (! (let ((a!1 (and (Inv C!1 D!1 B!1 A!1)
                                            (>= A!1 D!1)
                                            (not (= B!1 (+ 1 C!1 D!1))))))
                              (=> a!1 query!0))
                            :weight 0)))
             a!4
             query!0)))
  (mp a!5 (asserted (=> query!0 false)) false)))))
